#:import Factory kivy.factory.Factory

#:set std_height dp(40)
#:set default_thresh 60
#:set ext ['jpg', 'jpeg', 'png', 'tiff', 'bmp']
#:set ext sum([['*.' + i.lower(), '*.' + i.upper()] for i in ext], [])

# Basic custom class ------------------------------
<AnchorLayout>:
    size_hint_y: None
    height: std_height

<Button>:
    font_size: sp(20)
    size_hint: None, None
    width: self.texture_size[0] + dp(20)
    height: std_height

<RangeSlider>:
    range: 0, 255
    step: 1
    size_hint_y: None
    height: std_height

<ImageArea@Image>:
    canvas.after:
        Color:
            rgba: 1,1,1,1
        Line:
            rectangle: self.x, self.y, self.width, self.height
            width: dp(1)

<InnerBox@BoxLayout>:
    spacing: dp(10)
    size_hint_y: None
    height: self.minimum_height

<IntInput@TextInput>:
    input_filter: 'int'

<Word@Label>:
    size_hint_y: None
    height: self.texture_size[1] + dp(10)
    font_size: sp(20)

<TextInput>:
    font_size: sp(20)
    multiline: False
    line_height: 1
    size_hint: None, None
    height: std_height
    valign: 'center'
    halign: 'center'

<ScrollVIew>:
    bar_width: dp(10)
    scroll_type: ['bars']

<RVBox@BoxLayout>:
    text: ''
    texture: None
    ImageArea:
        id: img
        texture: root.texture
    Word:
        size_hint_y: None
        height: img.height
        text: root.text

<Sentence@Label>:
    font_size: sp(22)
    text_size: self.width, None
    size_hint_y: None
    height: self.texture_size[1] + dp(10)

<Space@Label>:
    size_hint_y: None
    height: dp(15)
    text: ''
    canvas.after:
        Line:
            points: self.x, self.y + self.height / 2, self.x + self.width, self.y + self.height / 2   
# --------------------------------------------

<Root>:
    do_default_tab: False
    tab_width: dp(120)
#    TabbedPanelItem:
#        text: 'Detect'
#        id: detect
#        DetectWidget:
#    TabbedPanelItem:
#        text: 'Fv/Fm'
#        id: fvfm
#        FvFmWidget:
#    TabbedPanelItem:
#        text: 'Align'
#        id: align
#        AlignWidget:
    TabbedPanelItem:
        text: 'Split Color'
        id: split_color
        SplitColorWidget:

<FileDialogPopup>:
    size_hint: 0.8, 0.8
    FileChooserIconView:
        id: filechooser
        path: app.home_dir
        filters: ext
        on_submit: 
            root.select(self.selection)
            root.dismiss()
        AnchorLayout:
            anchor_x: 'right'
            InnerBox:
                size_hint_x: None
                width: self.minimum_width
                Button:
                    text: 'Cancel'
                    on_release: root.dismiss()
                Button:
                    text: 'OK'
                    on_release:
                        root.select(filechooser.selection)
                        root.dismiss()

<ProgressPopup>:
    auto_dismiss: False
    title: root.title_text
    title_size: dp(25)
    separator_height: 2
    size_hint: 0.4, None
    height: box.height + self.title_size + dp(40)
    BoxLayout:
        id: box
        size_hint_y: None
        height: self.minimum_height
        orientation: 'vertical'
        padding: dp(10), dp(20), dp(10), dp(10)
        spacing: dp(10)
        Sentence:
            text: root.message
        AnchorLayout:
            anchor_x: 'right'
            Button:
                text: 'Cancel'
                on_press: 
                    root.cancel()
                    root.dismiss()

<ErrorPopup>:
    size_hint: 0.4, None
    height: box.height + self.title_size + dp(40)
    title_size: dp(25)
    title: root.title_text
    BoxLayout:
        id: box
        size_hint_y: None
        height: self.minimum_height
        orientation: 'vertical'
        padding: dp(10), dp(20), dp(10), dp(10)
        spacing: dp(10)
        Sentence:
            font_size: sp(25)
            text: root.message
        AnchorLayout:
            anchor_x: 'right'
            Button:
                text: 'OK'
                on_release: root.dismiss()

<DetectWidget>:
    padding: dp(10)
    spacing: dp(20)
    InnerBox:  # Image frame
        size_hint: 0.6, 1
        orientation: 'vertical'
        ImageArea:  # Input image
            id: input_img
            size_hint_y: 0.5
            source: root.src_dir + '/img/input.png'
        Image:
            size_hint: 1, None
            width: 
            source: root.src_dir + '/img/arrow.png'
        ImageArea:  # Output image
            texture: app.leaf_texture
            size_hint_y: 0.5
            source: root.src_dir + '/img/output.png'
    InnerBox:  # Method frame
        padding: dp(10), dp(0), dp(10), dp(10)
        size_hint: 0.4, 1
        orientation: 'vertical'
        canvas.after:
            Color:
                rgba: 1,1,1,1
            Line:
                rectangle: self.x-dp(2), self.y-dp(2), self.width+dp(2), self.height+dp(2)
                width: dp(2)
        Word:  # Method title label
            font_size: sp(25)
            text: 'Method'
        ScrollView:  # Method area
            InnerBox:
                orientation: 'vertical'
                Sentence:
                    text: 'Detects contours from an image.'
                Image:
                    height: dp(200)
                    size_hint_y: None
                    source: root.src_dir + '/img/icon.png'
                Space:
                InnerBox:  # Step 1 Input
                    Sentence:
                        text: 'Step 1. Select leaf image'
                    Button:
                        text: 'Select'
                        on_release: Factory.FileDialogPopup(select=root.input_img).open()
                Space:
                InnerBox:  # Step 2 Threshold
                    id: inner
                    orientation: 'vertical'
                    Sentence:
                        text: 'Step 2. Set threshold for extract'
                    InnerBox:
                        Button:
                            text: 'Reset'
                            on_release: thresh_slider.value = default_thresh
                        Slider:
                            id: thresh_slider
                            size_hint_y: None
                            height: std_height
                            range: 0, 255
                            step: 1
                            value: 0 if textin.text == '' else int(textin.text)
                            value: root.default_thresh
                        IntInput:
                            id: textin
                            text: '{:.0f}'.format(thresh_slider.value)
                            on_text_validate: root.int_input(self, thresh_slider.value)
                Space:
                InnerBox:  # Step 3 Run
                    Sentence:
                        text: 'Step 3. Extract leaf.'
                    Button:
                        text: 'RUN'
                        on_press: root.run()
                Space:
                AnchorLayout:  # Next button
                    anchor_x: 'right'
                    Button:
                        text: 'Next->'
                        on_release: app.root.switch_to(app.root.ids.fvfm)

<FvFmWidget>:
    padding: dp(10)
    spacing: dp(20)
    InnerBox:  #Result frame
        size_hint: 0.6, 1
        InnerBox:  # Image frame
            size_hint: 0.4, 1
            orientation: 'vertical'
            ImageArea:  # Input image
                id: input_img
                size_hint_y: 0.5
                source: root.src_dir + '/img/input.png'
            Image:
                size_hint: 1, None
                width: 
                source: root.src_dir + '/img/arrow.png'
            ImageArea:  # Output image
                texture: app.fvfm_texture
                size_hint_y: 0.5
                source: root.src_dir + '/img/output.png'
        InnerBox:  # Fv/Fm list frame
            size_hint: 0.2, 1
            orientation: 'vertical'
            Word:
                font_size: sp(25)
                text: 'Fv/Fm value'
            RecycleView:
                id: rv
                viewclass: 'RVBox'
                bar_width: dp(10)
                scroll_type: ["bars", "content"]
                scroll_wheel_distance: sp(50)
                RecycleBoxLayout:
                    default_size: None, sp(50)
                    default_size_hint: 1, None
                    size_hint_y: None
                    height: self.minimum_height
                    orientation: 'vertical'
                    spacing: dp(2)
    InnerBox:  # Method frame
        padding: dp(10), dp(0), dp(10), dp(10)
        size_hint: 0.4, 1
        orientation: 'vertical'
        canvas.after:
            Color:
                rgba: 1,1,1,1
            Line:
                rectangle: self.x-dp(2), self.y-dp(2), self.width+dp(2), self.height+dp(2)
                width: dp(2)
        Word:  # Method title label
            font_size: sp(25)
            text: 'Method'
        ScrollView:  # Method area
            InnerBox:
                orientation: 'vertical'
                Sentence:
                    text: 'Reads the Fv/Fm scale bar from an image and creates its value and color correspondence table. Also, extract only the leaf area from an image.'
                Image:
                    height: dp(200)
                    size_hint_y: None
                    source: root.src_dir + '/img/icon.png'
                Space:
                InnerBox:  # Step 1 Input
                    Sentence:
                        text: 'Step 1. Select leaf image'
                    Button:
                        text: 'Select'
                        on_release: Factory.FileDialogPopup(select=root.input_img).open()
                Space:
                InnerBox:  # Step 2 Threshold
                    id: inner
                    orientation: 'vertical'
                    Sentence:
                        text: 'Step 2. Set threshold for extract'
                    InnerBox:
                        Button:
                            text: 'Reset'
                            on_release: thresh_slider.value = default_thresh
                        Slider:
                            id: thresh_slider
                            size_hint_y: None
                            height: std_height
                            range: 0, 255
                            step: 1
                            value: 0 if textin.text == '' else int(textin.text)
                        IntInput:
                            id: textin
                            text: '{:.0f}'.format(thresh_slider.value)
                            on_text_validate: root.int_input(self, thresh_slider.value)             
                Space:
                InnerBox:  # Step 3 Run
                    Sentence:
                        text: 'Step 3. Extract leaf.'
                    Button:
                        text: 'RUN'
                        on_press: root.run()
                Space:
                InnerBox:
                    Button:
                        text: '<-Back'
                        on_press: app.root.switch_to(app.root.ids.detect)
                    AnchorLayout:  # Next button
                        anchor_x: 'right'
                        Button:
                            text: 'Next->'
                            on_release: app.root.switch_to(app.root.ids.align)
                            
<ALignWidget>:
    padding: dp(10)
    spacing: dp(20)
    InnerBox:  # Image framge
        padding: dp(10), dp(0), dp(10), dp(10)
        size_hint: 0.6, 1
        orientation: 'vertical'
        InnerBox:  # Label frame
            size_hint: 1, None
            height: self.minimum_height
            Word:
                text: 'Leaf'
            Word:
                text: 'Fv/Fm'
        InnerBox:  # Input image frame
            size_hint: 1, 0.3
            ImageArea:  # Input leaf image
                texture: app.leaf_texture
                source: root.src_dir + '/img/input.png'
            ImageArea:  # Input fvfm image
                texture: app.fvfm_texture
                source: root.src_dir + '/img/input.png'
        InnerBox:  # Aligned image frame
            size_hint: 1, 0.3
            ImageArea:  # Output leaf image
                texture: root.res_leaf_texture
                source: root.src_dir + '/img/output.png'
            ImageArea:  # Output fvfm image
                texture: root.res_fvfm_texture
                source: root.src_dir + '/img/output.png'
        InnerBox:  # Overlay image frame
            size_hint: 1, 0.3
            ImageArea:
                texture: root.overlay_texture
                source: root.src_dir + '/img/output.png'
    InnerBox:  # Method frame
        padding: dp(10), dp(0), dp(10), dp(10)
        size_hint: 0.4, 1
        orientation: 'vertical'
        canvas.after:
            Color:
                rgba: 1,1,1,1
            Line:
                rectangle: self.x-dp(2), self.y-dp(2), self.width+dp(2), self.height+dp(2)
                width: dp(2)
        Word:  # Method title label
            font_size: sp(25)
            text: 'Method'
        ScrollView:  # Method area
            InnerBox:
                orientation: 'vertical'
                Sentence:
                    text: 'Reads the Fv/Fm scale bar from an image and creates its value and color correspondence table. Also, extract only the leaf area from an image.'
                Image:
                    height: dp(200)
                    size_hint_y: None
                    source: root.src_dir + '/img/icon.png'
                Space:
                InnerBox:  # Step 3 Run
                    Sentence:
                        text: 'Step 1. Align'
                    Button:
                        text: 'RUN'
                        on_press: root.run()
                Space:
                InnerBox:
                    Button:
                        text: '<-Back'
                        on_release: app.root.switch_to(app.root.ids.fvfm)
                    AnchorLayout:  # Next button
                        anchor_x: 'right'
                        Button:
                            text: 'Next->'
                            on_release: app.root.switch_to(app.root.ids.split_color)

<SplitColorWidget>:
    padding: dp(10)
    spacing: dp(20)
    InnerBox:  # Image frame
        size_hint: 0.6, 1
        orientation: 'vertical'
        InnerBox:
            orientation: 'vertical'
            size_hint_y: 0.5
            Word:
                text: 'Original image'
            ImageArea:
                texture: app.res_leaf_texture
                source: root.src_dir + '/img/input.png'
        InnerBox:  #Split color images frame
            size_hint_y: 0.5
            InnerBox:  # Color 1
                size_hint: 0.5, 1
                orientation: 'vertical'
                Word:
                    text: 'Color 1'
                ImageArea:
                    texture: root.img_color1_texture
                    source: root.src_dir + '/img/output.png'
            InnerBox:  # Color 2
                size_hint: 0.5, 1
                orientation: 'vertical'
                Word:
                    text: 'Color 2'
                ImageArea:
                    texture: root.img_color2_texture
                    source: root.src_dir + '/img/output.png'
    InnerBox:  # Method frame
        padding: dp(10), dp(0), dp(10), dp(10)
        size_hint: 0.4, 1
        orientation: 'vertical'
        canvas.after:
            Color:
                rgba: 1,1,1,1
            Line:
                rectangle: self.x-dp(2), self.y-dp(2), self.width+dp(2), self.height+dp(2)
                width: dp(2)
        Word:  # Method title label
            font_size: sp(25)
            text: 'Method'
        ScrollView:  # Method area
            InnerBox:
                orientation: 'vertical'
                Sentence:
                    text: 'Split color to compare.'
                InnerBox:  # Step 1 select range of color1
                    orientation: 'vertical'
                    Sentence:
                        text: 'Step 1. Select hue range 1.'
                    Image:
                        id: color1_img
                        size_hint_y: None
                        height: std_height * 2
                    InnerBox:  # Slider frame
                        size_hint: 1, None
                        height: std_height
                        IntInput:
                            id: color1_text1
                            text: '{:.0f}'.format(color1_slider.value1)
                            on_text_validate: root.int_input(self, color1_slider.value1)
                        RangeSlider:
                            id: color1_slider
                            range: 0, 180
                            value1: 0 if color1_text1.text == '' else int(color1_text1.text)
                            value2: 0 if color1_text2.text == '' else int(color1_text2.text)
                        IntInput:
                            id: color1_text2
                            text: '{:.0f}'.format(color1_slider.value2)
                            on_text_validate: root.int_input(self, color1_slider.value2)
                    Button:
                        text: 'RUN'
                        on_press: root.run()
                InnerBox:  # Step 1 select range of color1
                    orientation: 'vertical'
                    Sentence:
                        text: 'Step 2. Select hue range 2.'
                    Image:
                        id: color2_img
                        size_hint_y: None
                        height: std_height * 2
                    InnerBox:  # Color2 slider frame
                        IntInput:
                            id: color2_text1
                            text: '{:.0f}'.format(color2_slider.value1)
                            on_text_validate: root.int_input(self, color2_slider.value1)
                        RangeSlider:
                            id: color2_slider
                            range: 0, 180
                            value1: 0 if color2_text1.text == '' else int(color2_text1.text)
                            value2: 0 if color2_text2.text == '' else int(color2_text2.text)
                        IntInput:
                            id: color2_text2
                            text: '{:.0f}'.format(color2_slider.value2)
                            on_text_validate: root.int_input(self, color2_slider.value2)
                    Button:
                        text: 'RUN'
                        on_press: root.run()
                Space:
                AnchorLayout:  # Next button
                    anchor_x: 'right'
                    Button:
                        text: 'Analyze'
                        on_release: root.analyze()


#<Widget>:
#    canvas.after:
#        Color:
#            rgba: 1,0,1,1
#        Line:
#            rectangle: self.x+1, self.y+1, self.width-1, self.height-1
#            dash_offset: 5
#            dash_length: 3
